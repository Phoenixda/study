* 为小技巧

1.异常处理
  try
  {}
  catch(xxxxx e)
  {}
  将可能出错的代码放入，try中，如果出错，根据异常的对象（xxxxx）进行捕获,并且
  继续向下执行
2.try后面接的catch可以放多个catch
  eg:
  try
  {}
  catch(xxxxx e)
  {}
  catch(yyyyy e)
  {}
  catch(zzzzz e)
  {}
  ....
3.找异常（有图）
  无正确catch，一直返回引用函数
4.常用的对异常对象的
  从异常对象获得信息
  1.System.out.println(e.getMessage);
  2.System.out.println(e);
  3.e.printStackTrace();
    流？
  StackTrace 调用轨迹
5.异常抛出
  try
  {}
  catch(xxxxx e)
  {
     throw e;
  }
  把异常抛出，给下一个catch，如果没有catch，正常报错（不是继续执行catch{}
  后面的）
6.多个catch的传递，知道一个catch捕获，就相当于解决异常，它下面的catch不再
  执行
7.异常处理
  使程序不至于崩溃
  程序崩溃：
           1.程序本身有问题
           2.客户操作不规范
8.异常处理机制
  将业务逻辑代码  与  异常处理代码  分开
9.没有异常处理
  程序异常时，终止，回到函数
10.用  thows（在函数头的函数名后）提醒函数可能抛出的异常
11.子类的异常可以被父类的捕捉器捕获
12.excption是throw类的父类
13.如果你覆盖父类（抛出类）的版本，你不能声明更多的异常
14.如果父类的构造函数用throws提示可能出错
   因为，子类一定会对父类的构造函数调用（无论是默认还是主动）
   所以，子类要做声明来声明它可能出错
15.构造函数对于子类可以做比父类更多的抛出异常
   但是成员函数不能
   对于成员函数，我们肯能拿着子类当父类去看
16.异常声明遇到继承关系
   1.当覆盖一个函数时，子类不能声明抛出比父类的版本更多的异常
   2.在子类的构造函数中，必须声明父类可能抛抛出的全部异常


