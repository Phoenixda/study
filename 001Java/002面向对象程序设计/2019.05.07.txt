* 为小技巧

1.抽象类 absorb  可以有抽象函数
  接口类 interface  只能有抽象函数
  对方法来说
2.接口
  设计程序时先定义接口，再实现类
  类和接口不一定是一对一的关系
  这样任何需要在函数间传入传出的一定是接口而不是具体的类
  适合多人同时写一个大程序（定义多个接口，大家都可以同时编程）
  但是是代码膨胀
3.Swing类
  里面有部件和容器
  容器也是一种部件
  容器管部件的位置和大小  ――布局管理器（Borderlayout）
4.Borderlayout
  五个区
  容器的布局管理器，管理位置
  五个区：north，west,east,center,south
  (三层 第一层：north  第二层：west,east,center 第三层：south)
  大小不是程序员设计的，但是适应大小性好，但是不美观
5.做出的新按钮，并没有什么功能，引出消息机制。
6.消息机制
  在图形界面中的操作反应给程序
  做一个监听机制
  可以把一些代码加入或调用。
  按钮对象.
7.反转控制
  JButton 有一个ActionListener
  按下或撤销按下
  你加入的函数会实现ActionListener的接口（你只要实现它的函数即可，而你知道
  它的函数，eclipse会自动给你加，只要你new），于是JButton可以使用你的函数（
  因为JButton里调用了ActionListener类，根据多态的性质，它使用的变量可以是
  ActionListener，也可以是你的对象，虽然不知道它是怎么知道子类）
  （不好理解）
  反转控制  就是  Swing的消息机制
8.内部类
  在一个类的内部又定义一个类
9.复习：
  构造函数为private 变量初始化，为了继承的类可以super到private 变量
10.内部类
   内部类是类的成员
   像其它内部的函数一样，他可以访问其它的成员
   否则，在外面的化要做好多工作，定义其它类的变量，才可以通过其它类使用
   其它类的成员，而如果是内部类就可以直接使用
11.匿名内部类
   内部类：类的内部类，函数的内部类
   匿名内部类是在new的同时制造了类，类在new的()里面
   所以没有名字，叫匿名内部类
   匿名内部类访问本地变量时只能访问带final的
12.匿名类
   在new对象的时候给出的类的定义形成了匿名类
   匿名类可以继承某类，也可以继承接口
   Swing的消息机制广泛使用匿名类
13.匿名类的主要用处
   Swing函数
   优点：省的起名字
14.注册反转（反转控制）
   按钮公布一个接口，和一个注册或注销函数、
   你实现接口，将你的代码注册到按钮上（代码是匿名内部类里面的）
   一旦按钮按下，就会反过来调用你的守听对象（匿名内部类）的某个函数（你加的
   ，形成类按钮与代码（程序）的交互）









